import asyncio
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommandScopeAllPrivateChats

from common.bot_cmds_list import private

from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

bot = Bot(token=os.getenv('TOKEN'))

ALLOWED_UPDATES = ['message, edited_message']

dp = Dispatcher()

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!üñê –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã (—á—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é), —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –≤—ã–ø–æ–ª–Ω–∏ —É—Å–ª–æ–≤–∏—è: ")
    await message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª)")                                     
    
@dp.message(Command("check"))
async def check_cmd(message: types.Message):
    user_id = message.from_user.id

    try:
        user_status = await bot.get_chat_member(chat_id=-1002167897714, user_id=user_id)

        if user_status.status in ['member', 'administrator', 'creator']:
            await message.reply("–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            # –ß—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
        else:
            await message.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
            await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª)")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot, allowed_updates=ALLOWED_UPDATES)

asyncio.run(main())